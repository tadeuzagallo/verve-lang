// RUN: %not %verve | %check

global import Enum
global import Match { Nat(Z) }

import Enum
import Enum as E { Nat, Bool(True) }

import Match { Nat(Z) }
import Match as M { Nat(Z), length, List(Cons, Nil) }

global import Fixtures.A
global import Fixtures.B
import Fixtures.A as A { f, (>>) }

A // CHECK-L: A : X
B // CHECK-L: B : X

fn f(x: Nat) { }

// CHECK-L: (Nat) -> Void
f

Z // CHECK-L: Z : Nat
S // CHECK-L: Unknown variable: S

// TODO: Print namespaced values

/* CHECK-L: Enum.True : Bool */
// CHECK-L: True : Bool
Enum.True

/* CHECK-L: E.True : Bool */
// CHECK-L: True : Bool
E.True

/* CHECK-L: Match.Z : Nat */
// CHECK-L: Z : Nat
Match.Z

// CHECK-L: Unknown variable: Match.S
Match.S

/* CHECK-L: M.Z : Nat */
// CHECK-L: Z : Nat
M.Z

// CHECK-L: Unknown variable: M.S
M.S

/*CHECK-L: M.S(M.Z) : Nat*/
// CHECK-L: S(Z) : Nat
M.length(M.Cons(1, M.Nil))

// TODO: Improve the error mesage - really confusing right now as only the last
// part of the name is printed, so we get `expected List but got List`

// CHECK-L: TypeError
M.length(M.Cons(1, Nil))

// CHECK-L: Unknown variable: M.add
M.add

// Test scoped renaming - Types and Values with the same name should not be mixed
enum Pair<S, T> { Pair(S, T) }
fn f() -> Pair<C, D> { Pair(D, C) }
f // CHECK-L: () -> Pair<C, D>

// Test that instancesVars are properly tracked
let k = K { x: 42 }
k.x // CHECK-L: 42 : Int

// Check implementations are properly imported
print(k) // CHECK-L: "K"

// Check reassoc imports
3 >> 1 + 2 // CHECK-L: 3 : Int
2 + 3 >> 1 // CHECK-L: 3 : Int

// Check interface imports
implementation I<K> {
  fn f(k) { print(k) }
}
A.f(k) // CHECK-L: "K"
