fn id<T>(x: T) -> T { x }

enum Optional<T> {
  None
  Some(T)
}

enum Either<T, U> {
  Left(T)
  Right(U)
}

interface Number<T> {
  operator (T) + (T) -> T

  operator (T) - (T) -> T

  #prec(higher(+))
  operator (T) * (T) -> T

  #prec(equal(*))
  operator (T) / (T) -> T

  #prec(equal(*))
  operator (T) % (T) -> T

  let negate : (T) -> T
}


implementation Number<Int> {
  operator x + y { int_add(x, y) }
  operator x - y { int_sub(x, y) }
  operator x * y { int_mul(x, y) }
  operator x / y { int_div(x, y) }
  operator x % y { int_mod(x, y) }
  fn negate(x) { int_neg(x) }
}

interface Printable<T> {
  let to_string : (T) -> String
}

fn print<T: Printable>(x: T) {
  string_print(to_string(x))
}

implementation Printable<String> {
  fn to_string(s) { s }
}

implementation Printable<Int> {
  let to_string = int_to_string
}

implementation Printable<Bool> {
  fn to_string(b) {
    match b {
      case True: "True"
      case False: "False"
    }
  }
}

interface Intish<T> {
  let toInt : (T) -> Int
}

implementation Intish<Char> {
  let toInt = char_to_int
}

// LIST HELPERS
fn map<T, U>(list: List<T>, f: (T) -> U) -> List<U> {
  match list {
    case []: []
    // TODO: replace with value-rest
    case [x, ...rest]:
    Cons(f(x), rest.map(f))
  }
}

fn reduce<T, U>(list: List<T>, f: (U, T) -> U, init: U) -> U {
  match list {
    case []: init
    case [x, ...rest]:
      let init' = f(init, x)
      rest.reduce(f, init')
  }
}

fn forEach<T>(list: List<T>, f: (T) -> Void) {
  match list {
    case []:
    case [x, ...rest]:
      f(x)
      rest.forEach(f)
  }
}

// STRING
let length = strlen

// Eq
interface Equal<T> {
  operator (T) == (T) -> Bool
}

implementation Equal<Int> {
  operator x == y {
    match x - y {
      case 0: True
      case _: False
    }
  }
}

implementation Equal<Char> {
  operator x == y {
    toInt(x) == toInt(y)
  }
}

fn not(b: Bool) -> Bool {
  match b {
    case True: False
    case False: True
  }
}

operator<T: Equal> (x: T) != (y: T) -> Bool {
  not(x == y)
}

interface Comparable<T> {
  operator (T) < (T) -> Bool
  operator (T) > (T) -> Bool
}

implementation Comparable<Int> {
  operator x < y { int_lt(x, y) }
  operator x > y { int_gt(x, y) }
}
